'''
Este programa implementa um modelo preditivo de viabilidade de projetos usando Regress√£o Log√≠stica com a biblioteca scikit-learn.
Ele foi projetado para ser reutiliz√°vel: treina o modelo apenas uma vez, salva em disco, e nas execu√ß√µes seguintes apenas carrega
o modelo e faz previs√µes sobre novos projetos.

‚úÖ Objetivo:

Prever se um projeto √© vi√°vel ou n√£o com base em tr√™s vari√°veis:

investment (investimento necess√°rio)

expected_return (retorno esperado)

impact_score (nota de impacto do projeto)

üîÅ Etapas do Programa:

1. Importa√ß√£o de bibliotecas
Importa bibliotecas necess√°rias para:

manipula√ß√£o de dados (pandas, numpy)

modelagem (regress√£o log√≠stica, normaliza√ß√£o)

avalia√ß√£o do modelo (classification_report)

persist√™ncia de arquivos (joblib, os)

2. Defini√ß√£o da fun√ß√£o train_or_predict(new_projects)
Essa √© a fun√ß√£o central do programa. Ela pode:

Treinar um novo modelo, se ainda n√£o existir um modelo salvo.

Usar um modelo j√° treinado, se j√° tiver sido salvo anteriormente.

Fazer previs√µes sobre novos projetos, se fornecidos.

Internamente, essa fun√ß√£o realiza:

Carregamento dos dados hist√≥ricos de projetos de projects_data.csv.

Separa√ß√£o das vari√°veis independentes (X) e alvo (y).

Normaliza√ß√£o dos dados (com StandardScaler).

Divis√£o entre treino e teste.

Treinamento de um modelo de regress√£o log√≠stica.

Avalia√ß√£o do modelo com relat√≥rio de m√©tricas.

Salvamento do modelo, scaler e m√©tricas em arquivos .joblib.

Previs√£o da viabilidade de novos projetos passados como argumento.

3. Teste do modelo com novos dados
Na parte final do c√≥digo, √© feito um teste simples:

new_projects = [
    {"investment": 40000, "expected_return": 60000, "impact_score": 6}
]

Esse dicion√°rio representa um novo projeto hipot√©tico. A fun√ß√£o train_or_predict() √© chamada com esse projeto, e ent√£o:

A fun√ß√£o retorna o projeto com a previs√£o de viabilidade (0 ou 1) e a probabilidade de viabilidade (valores entre 0 e 1).

Tamb√©m imprime as m√©tricas do modelo previamente treinado.

üì¶ O que o programa gera:

Arquivos .joblib:

logistic_model.joblib: o modelo de regress√£o treinado.

logistic_model_scaler.joblib: objeto de normaliza√ß√£o.

logistic_model_metrics.joblib: dicion√°rio com m√©tricas (precis√£o, recall, F1, etc.).

üìå Aplica√ß√µes:
Esse tipo de programa √© comum em ambientes de data science aplicada a neg√≥cios ou gest√£o p√∫blica, onde se deseja automatizar a avalia√ß√£o da viabilidade de projetos usando dados hist√≥ricos e aprendizado de m√°quina.

'''


#!/usr/bin/env python
# coding: utf-8

# T√≠tulo do script
# 2.1.Viabilidade de Projetos

# --- Bibliotecas necess√°rias ---
import pandas as pd  # Manipula√ß√£o de dados com DataFrames
from sklearn.model_selection import train_test_split  # Separar dados em treino e teste
from sklearn.linear_model import LogisticRegression  # Modelo de Regress√£o Log√≠stica
from sklearn.preprocessing import StandardScaler  # Normaliza√ß√£o de dados
from sklearn.metrics import classification_report  # Relat√≥rio de desempenho do modelo
import numpy as np  # Opera√ß√µes num√©ricas (n√£o utilizado diretamente neste script)
import joblib  # Salvamento e carregamento de modelos treinados
import os  # Opera√ß√µes com o sistema de arquivos

# --- Fun√ß√£o principal: treina o modelo ou faz previs√µes ---
def train_or_predict(new_projects):
    # Caminho onde o modelo ser√° salvo ou carregado
    model_path = 'logistic_model.joblib'

    # Verifica se o modelo j√° foi salvo anteriormente
    if os.path.exists(model_path):
        # Carrega o modelo e o scaler do disco
        model = joblib.load(model_path)
        scaler = joblib.load(model_path.replace(".joblib", "_scaler.joblib"))
    else:
        # Carrega os dados do arquivo CSV
        df_projects = pd.read_csv("projects_data.csv")

        # Seleciona as vari√°veis preditoras (X)
        X = df_projects[["investment", "expected_return", "impact_score"]]
        # Seleciona a vari√°vel alvo (y)
        y = df_projects["viability"]

        # Normaliza os dados
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # Divide os dados em conjunto de treino e teste
        X_train, X_test, y_train, y_test = train_test_split(
            X_scaled, y, test_size=0.3, random_state=42
        )

        # Inicializa o modelo de Regress√£o Log√≠stica
        model = LogisticRegression()
        # Treina o modelo com os dados de treino
        model.fit(X_train, y_train)

        # Faz previs√µes com os dados de teste
        y_pred = model.predict(X_test)
        # Gera relat√≥rio de classifica√ß√£o (m√©tricas)
        report = classification_report(y_test, y_pred, output_dict=True)

        # Salva o modelo treinado, o scaler e as m√©tricas no disco
        joblib.dump(model, model_path)
        joblib.dump(scaler, model_path.replace(".joblib", "_scaler.joblib"))
        joblib.dump(report, model_path.replace(".joblib", "_metrics.joblib"))

    # Se houver novos projetos para prever a viabilidade
    if new_projects:
        # Cria um DataFrame com os novos projetos
        df_new_projects = pd.DataFrame(new_projects)

        # Aplica o mesmo processo de normaliza√ß√£o dos dados
        X_new_scaled = scaler.transform(df_new_projects)

        # Faz a previs√£o de viabilidade (0 ou 1)
        predictions = model.predict(X_new_scaled)
        # Obt√©m a probabilidade da classe 1 (projeto vi√°vel)
        probabilities = model.predict_proba(X_new_scaled)[:, 1]

        # Adiciona colunas com a probabilidade e a previs√£o ao DataFrame
        df_new_projects["probability"] = probabilities
        df_new_projects["viability"] = predictions

        # Retorna o DataFrame com previs√µes e as m√©tricas do modelo
        return df_new_projects, joblib.load(model_path.replace(".joblib", "_metrics.joblib"))

    # Caso n√£o haja novos projetos, retorna apenas as m√©tricas
    return None, joblib.load(model_path.replace(".joblib", "_metrics.joblib"))

# --- Teste do modelo com novos dados ---

# Lista de dicion√°rios representando novos projetos
new_projects = [
    # {"investment": 13000, "expected_return": 69000, "impact_score": 7}  # Exemplo comentado
    {"investment": 40000, "expected_return": 60000, "impact_score": 6},  # Projeto a ser avaliado
    {"investment": 10000, "expected_return": 90000, "impact_score": 6},
    {"investment": 10000, "expected_return": 90000, "impact_score": 6}
    
]

# Executa a fun√ß√£o de treino/previs√£o com os novos projetos
predictions, metrics = train_or_predict(new_projects)

# Exibe os resultados das previs√µes, se houver
if predictions is not None:
    print("\nNovos Projetos e Viabilidade:")
    print(predictions)

# Exibe as m√©tricas do modelo
print("\nM√©tricas do Modelo:")
print(metrics)





